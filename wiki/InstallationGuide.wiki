#summary Installation hints.
#labels Featured,Phase-Deploy

= Prerequisites =

You need [http://code.google.com/p/fuserl fuserl] and [http://code.google.com/p/fragmentron fragmentron].

You also need [http://support.process-one.net/doc/display/CONTRIBS/EUnit eunit] from process one.

= Installing =

The project uses automake.  The default prefix is /usr; if you don't like that, use the {{{--prefix}}} option to configure.

Running {{{make check}}} is strongly suggested.

= Hello World =

No nice mkfs util or anything right now.[[#1 1]]  Here's essentially what a mkfs.walken would do for you.  Start the Erlang emulator

{{{
% erl -name walken +A 10                    
Erlang (BEAM) emulator version 5.5.2 [source] [64-bit] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.5.2  (abort with ^G)
(5975@ubsrvvmw)1> ok = application:load (mnesia).
ok
(5975@ubsrvvmw)2> application:set_env (mnesia, dir, "/tmp/walkendata").
ok
(5975@ubsrvvmw)3> mnesia:start ().
ok
(5975@ubsrvvmw)4> { atomic, ok } = mnesia:change_table_copy_type (schema, node (), disc_copies).
{atomic,ok}
(5975@ubsrvvmw)5> ok = application:load (walkenfs).
ok
(5975@ubsrvvmw)6> ok = application:set_env (walkenfs, mount_point, "/tmp/walken").
ok
(5975@ubsrvvmw)7> file:make_dir ("/tmp/walken").
ok
(5975@ubsrvvmw)8> walkenfs:start ().

=INFO REPORT==== 8-Mar-2008::19:10:27 ===
walkenfs attempting load of ets: auto_detect 321717412589622444982284875105537266341
Mnesia('5975@ubsrvvmw'): User event: {fragmentron,create_table,schema_extra}
ok
}}}
You should now have a walkenfs mounted at {{{/tmp/walken}}}.  The actual filesystem (mnesia) data is being stored in {{{/tmp/walkendata}}}.  Try stuff, see what happens. [[#2 2]] If you exit the Erlang shell it will get unmounted.  If you want to unmount cleanly, type
{{{
(5975@ubsrvvmw)9> init:stop ().
ok
(5975@ubsrvvmw)10>
}}}
in the emulator.

= Tested Platforms =

  * Ubuntu 64 bit Linux (feisty).
  * OS/X 10.4 i386: known *not* to work, I'm trying to figure it out.

= Footnotes =

== 1 == 

Why is there no mkfs.walken?  Because it boils down to specifying a distributed mnesia config.  Those who know how to do that (wizards!) would use the erlang shell to do it.  For the rest of us, or for those of us using EC2 where specifying the configuration manually is unrealistic given the dynamic nature of the custer, what's really needed is a way to automatically maintain the mnesia configuration as nodes are brought up and down.  We actually have a system to do the latter that we use in production, but I haven't had a chance to open source it yet.  When I do, I figure mkfs.walken can be written in terms of the minimal specification for the automatic configuration system.

Stay tuned.

== 2 ==

Try things *outside* the Erlang emulator.  Otherwise you will find it very easy to deadlock the file server.  Not sure why this happens yet.  In our production systems we run walkenfs in a separate Erlang emulator and always will (Erlang being an "implementation detail").